import { useState, useEffect } from 'react'
import type { BulkActionType, BulkActionConfig, ActionField } from '../types'

interface ActionConfigPanelProps {
  onConfigChange: (config: BulkActionConfig | null) => void
  selectedCount: number
}

const BULK_ACTIONS: BulkActionType[] = [
  {
    id: 'update_description',
    name: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
    icon: 'üìù',
    description: '–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —á–∞—Ç–æ–≤',
    category: 'content',
    fields: [
      {
        key: 'description',
        label: '–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        type: 'textarea',
        required: true,
        placeholder: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤...',
        validation: { maxLength: 500 }
      }
    ]
  },
  {
    id: 'update_welcome',
    name: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
    icon: 'üëã',
    description: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    category: 'content',
    fields: [
      {
        key: 'welcome_message',
        label: '–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
        type: 'textarea',
        required: true,
        placeholder: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç! üéì',
        validation: { maxLength: 1000 }
      },
      {
        key: 'auto_delete_delay',
        label: '–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ (—Å–µ–∫)',
        type: 'number',
        placeholder: '300',
        validation: { min: 10, max: 3600 }
      }
    ]
  },
  {
    id: 'broadcast_message',
    name: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
    icon: 'üì¢',
    description: '–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã',
    category: 'communication',
    fields: [
      {
        key: 'message',
        label: '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
        type: 'textarea',
        required: true,
        placeholder: '–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...',
        validation: { maxLength: 2000 }
      },
      {
        key: 'pin_message',
        label: '–ó–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
        type: 'boolean'
      }
    ]
  },
  {
    id: 'chat_settings',
    name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞',
    icon: '‚öôÔ∏è',
    description: '–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤',
    category: 'settings',
    fields: [
      {
        key: 'is_active',
        label: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç',
        type: 'boolean'
      },
      {
        key: 'moderation_level',
        label: '–£—Ä–æ–≤–µ–Ω—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
        type: 'select',
        options: [
          { value: 'low', label: '–ù–∏–∑–∫–∏–π' },
          { value: 'medium', label: '–°—Ä–µ–¥–Ω–∏–π' },
          { value: 'high', label: '–í—ã—Å–æ–∫–∏–π' }
        ]
      }
    ]
  },
  {
    id: 'user_management',
    name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
    icon: 'üë•',
    description: '–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
    category: 'moderation',
    fields: [
      {
        key: 'action_type',
        label: '–¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è',
        type: 'select',
        required: true,
        options: [
          { value: 'kick_inactive', label: '–ò—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö' },
          { value: 'mute_all', label: '–ó–∞–≥–ª—É—à–∏—Ç—å –≤—Å–µ—Ö' },
          { value: 'promote_admins', label: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤' }
        ]
      },
      {
        key: 'duration',
        label: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)',
        type: 'number',
        placeholder: '60',
        validation: { min: 1, max: 10080 }
      }
    ]
  }
]

const ActionConfigPanel: React.FC<ActionConfigPanelProps> = ({
  onConfigChange,
  selectedCount
}) => {
  const [selectedAction, setSelectedAction] = useState<BulkActionType | null>(null)
  const [values, setValues] = useState<Record<string, unknown>>({})
  const [applyTo, setApplyTo] = useState<'selected' | 'all'>('selected')

  useEffect(() => {
    if (selectedAction) {
      const config: BulkActionConfig = {
        actionType: selectedAction.id,
        values,
        applyTo,
        confirmationRequired: selectedAction.category === 'moderation'
      }
      onConfigChange(config)
    } else {
      onConfigChange(null)
    }
  }, [selectedAction, values, applyTo, onConfigChange])

  const handleActionSelect = (action: BulkActionType) => {
    setSelectedAction(action)
    setValues({})
  }

  const handleValueChange = (key: string, value: unknown) => {
    setValues(prev => ({ ...prev, [key]: value }))
  }

  const renderField = (field: ActionField) => {
    const value = values[field.key] || ''

    switch (field.type) {
      case 'text':
        return (
          <input
            type="text"
            value={value}
            onChange={(e) => handleValueChange(field.key, e.target.value)}
            placeholder={field.placeholder}
            className="field-input"
          />
        )

      case 'textarea':
        return (
          <textarea
            value={value}
            onChange={(e) => handleValueChange(field.key, e.target.value)}
            placeholder={field.placeholder}
            className="field-textarea"
            rows={4}
          />
        )

      case 'number':
        return (
          <input
            type="number"
            value={value}
            onChange={(e) => handleValueChange(field.key, parseInt(e.target.value))}
            placeholder={field.placeholder}
            min={field.validation?.min}
            max={field.validation?.max}
            className="field-input"
          />
        )

      case 'boolean':
        return (
          <label className="field-checkbox">
            <input
              type="checkbox"
              checked={value || false}
              onChange={(e) => handleValueChange(field.key, e.target.checked)}
            />
            <span className="checkmark"></span>
          </label>
        )

      case 'select':
        return (
          <select
            value={value}
            onChange={(e) => handleValueChange(field.key, e.target.value)}
            className="field-select"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç</option>
            {field.options?.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        )

      default:
        return null
    }
  }

  const groupedActions = BULK_ACTIONS.reduce((acc, action) => {
    if (!acc[action.category]) acc[action.category] = []
    acc[action.category].push(action)
    return acc
  }, {} as Record<string, BulkActionType[]>)

  const categoryNames = {
    content: '–ö–æ–Ω—Ç–µ–Ω—Ç',
    settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    moderation: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è',
    communication: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏'
  }

  return (
    <div className="action-config-panel">
      <div className="panel-header">
        <h3>üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π</h3>
        <div className="selection-counter">
          {selectedCount > 0 ? (
            <span className="counter-badge">{selectedCount} –≤—ã–±—Ä–∞–Ω–æ</span>
          ) : (
            <span className="counter-empty">–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã</span>
          )}
        </div>
      </div>

      {!selectedAction ? (
        <div className="action-selector">
          <div className="action-grid-compact">
            {Object.entries(groupedActions).map(([category, actions]) => (
              <div key={category} className="action-category-compact">
                <h4 className="category-title-compact">
                  {categoryNames[category as keyof typeof categoryNames]}
                </h4>
                <div className="actions-row">
                  {actions.map(action => (
                    <button
                      key={action.id}
                      className="action-card-compact"
                      onClick={() => handleActionSelect(action)}
                      disabled={selectedCount === 0}
                      title={action.description}
                    >
                      <div className="action-icon-compact">{action.icon}</div>
                      <div className="action-name-compact">{action.name}</div>
                    </button>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div className="action-config-expanded">
          <div className="config-header-expanded">
            <button
              className="back-button-expanded"
              onClick={() => setSelectedAction(null)}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>
            <div className="config-title-expanded">
              <span className="config-icon">{selectedAction.icon}</span>
              <h4>{selectedAction.name}</h4>
            </div>
          </div>

          <div className="config-form-expanded">
            {selectedAction.fields.map(field => (
              <div key={field.key} className="field-group-expanded">
                <label className="field-label-expanded">
                  {field.label}
                  {field.required && <span className="required">*</span>}
                </label>
                {renderField(field)}
              </div>
            ))}

            <div className="apply-options-expanded">
              <label className="apply-option-expanded">
                <input
                  type="radio"
                  value="selected"
                  checked={applyTo === 'selected'}
                  onChange={(e) => setApplyTo(e.target.value as 'selected')}
                />
                <span>–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º <strong>({selectedCount})</strong> —á–∞—Ç–∞–º</span>
              </label>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default ActionConfigPanel
