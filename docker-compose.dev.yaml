services:
  bot:
    build:
      context: .
      target: development
    env_file:
      - .env
    volumes:
      - .:/app
      - /app/.venv
    depends_on:
      - db
    environment:
      - PYTHONUNBUFFERED=1
    command: >
      sh -c "
      ./scripts/wait_for_postgres.sh &&
      uv run alembic upgrade head &&
      uv run watchfiles 'uv run -m app.presentation.telegram' app/ --ignore-paths '*.pyc,__pycache__,.git'
      "
    profiles:
      - local-db

  # Bot version for production DB (without local DB dependency)
  bot-prod-db:
    build:
      context: .
      target: development
    env_file:
      - .env
      - .env.prod-db  # Production DB settings file
    volumes:
      - .:/app
      - /app/.venv
    environment:
      - PYTHONUNBUFFERED=1
    command: >
      sh -c "
      echo '🔗 Connecting to production database...' &&
      echo 'DB Host:' \$$DB_HOST &&
      echo 'DB Name:' \$$DB_NAME &&
      if [ \"$$SKIP_MIGRATIONS\" = \"true\" ]; then
        echo '⚠️  Skipping migrations (read-only mode)';
      else
        echo '🔄 Running migrations...';
        uv run alembic upgrade head;
      fi &&
      echo '🚀 Starting bot...' &&
      uv run watchfiles 'uv run -m app.presentation.telegram' app/ --ignore-paths '*.pyc,__pycache__,.git'
      "
    profiles:
      - prod-db

  api:
    build:
      context: .
      target: development
    env_file:
      - .env
    volumes:
      - .:/app
      - /app/.venv
    environment:
      - PYTHONUNBUFFERED=1
    command: >
      sh -c "
      ./scripts/wait_for_postgres.sh &&
      uv run uvicorn app.presentation.api.main:app --host 0.0.0.0 --port 8000 --reload
      "
    depends_on:
      - db
    ports:
      - "${API_PORT:-8000}:8000"
    profiles:
      - local-db

  api-prod-db:
    build:
      context: .
      target: development
    env_file:
      - .env
      - .env.prod-db
    volumes:
      - .:/app
      - /app/.venv
    environment:
      - PYTHONUNBUFFERED=1
    command: >
      sh -c "
      echo '🔗 Connecting to production database...' &&
      echo 'DB Host:' \$$DB_HOST &&
      echo 'DB Name:' \$$DB_NAME &&
      echo '🚀 Starting API...' &&
      uv run uvicorn app.presentation.api.main:app --host 0.0.0.0 --port 8000 --reload
      "
    ports:
      - "${API_PORT:-8000}:8000"
    profiles:
      - prod-db

  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - webapp
      - api
    profiles:
      - local-db

  nginx-prod-db:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx.prod-db.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - webapp
      - api-prod-db
    profiles:
      - prod-db

  webapp:
    build:
      context: ./webapp
      target: development
    volumes:
      - ./webapp:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    command: sh -c "npm run dev -- --host 0.0.0.0 --port 80"

  db:
    image: postgres:17.6
    restart: always
    shm_size: 128mb
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - moderator-bot-db:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    profiles:
      - local-db

  adminer:
    image: adminer:5.3.0
    restart: always
    env_file:
      - .env
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    depends_on:
      - db
    profiles:
      - local-db

  # Adminer for production DB access
  adminer-prod:
    image: adminer:5.3.0
    restart: always
    env_file:
      - .env
      - .env.prod-db
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    profiles:
      - prod-db

volumes:
  moderator-bot-db:
