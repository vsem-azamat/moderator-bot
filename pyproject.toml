[project]
name = "moderator-bot"
version = "0.1.0"
description = "Telegram bot for moderating educational chats."
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "aiogram>=3.5",
    "alembic>=1.13",
    "psycopg2-binary>=2.9",
    "pydantic>=2.5",
    "pydantic-settings>=2.1",
    "sqlalchemy[asyncio]>=2.0",
    "asyncpg>=0.29",
    "python-dotenv",
    "structlog>=23.2",
    "pytz>=2024.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.ruff]
line-length = 120
src = ["app", "tests"]
target-version = "py312"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long
    "S101",  # use of assert
    "T201",  # print found
    "B008",  # function call in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "ARG001",  # unused function arguments (common in tests/fixtures)
    "ARG002",  # unused method arguments (common in test methods)
    "S311",    # pseudo-random generators (acceptable in tests)
    "SIM117",  # nested with statements (common in test assertions)
    "E402",    # module level import not at top (pytest fixtures)
    "N815",    # mixed case variable name (test data)
    "PLR2004", # magic value used in comparison
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
packages = ["app", "tests"]
exclude = "alembic/"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Specific module configurations
[[tool.mypy.overrides]]
module = [
    "aiogram.*",
    "alembic.*",
    "asyncpg.*",
    "psycopg2.*",
]
ignore_missing_imports = true

[dependency-groups]
dev = [
    "pytest>=8.0",
    "pytest-asyncio>=0.23",
    "pytest-cov>=4.0",
    "pytest-mock>=3.12",
    "aiosqlite>=0.20",
    "ruff>=0.12.4",
    "mypy>=1.8",
    "pre-commit>=3.6",
    "watchfiles>=0.21",
"psutil",
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "handlers: marks tests as handler tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/migrations/*",
]

[tool.coverage.report]
show_missing = true
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
